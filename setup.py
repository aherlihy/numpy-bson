import glob
import os
import sys

# Suppress warnings during shutdown, http://bugs.python.org/issue15881
try:
    import multiprocessing
except ImportError:
    pass

from setuptools import setup, Command, Extension
from setuptools.command.build_ext import build_ext as _build_ext


MAJOR = 0
MINOR = 2
MICRO = '0.dev0'


def write_version_py(filename='bsonnumpy/version.py'):
    content = """# THIS FILE IS GENERATED BY SETUP.PY
version = '{}'
"""
    version = '{}.{}.{}'.format(MAJOR, MINOR, MICRO)
    with open(filename, 'w') as f:
        f.write(content.format(version))
    return version


VERSION = write_version_py()


try:
    from sphinx.cmd import build as sphinx
    HAVE_SPHINX = True
except Exception:
    HAVE_SPHINX = False


# Hack that ensures NumPy is installed prior to the build commencing.
# See http://stackoverflow.com/questions/19919905 for details.
class build_ext(_build_ext):
    def finalize_options(self):
        _build_ext.finalize_options(self)
        try:
            # Prevent numpy from thinking it is still in its setup process:
            __builtins__.__NUMPY_SETUP__ = False
        except Exception as exc:
            print("Warning: %s" % exc)
        import numpy
        self.include_dirs.append(numpy.get_include())


# Enables building docs and running doctests from setup.py
class doc(Command):

    description = "generate or test documentation"

    user_options = [("test", "t",
                     "run doctests instead of generating documentation")]

    boolean_options = ["test"]

    def initialize_options(self):
        self.test = False

    def finalize_options(self):
        pass

    def run(self):
        if not HAVE_SPHINX:
            raise RuntimeError(
                "You must install Sphinx to build or test the documentation.")

        if self.test:
            path = os.path.join(
                os.path.abspath('.'), "doc", "_build", "doctest")
            mode = "doctest"
        else:
            path = os.path.join(
                os.path.abspath('.'), "doc", "_build", VERSION)
            mode = "html"

            try:
                os.makedirs(path)
            except:
                pass

        sphinx_args = ["-E", "-b", mode, "doc", path]

        # sphinx.main calls sys.exit when sphinx.build_main exists.
        # Call build_main directly so we can check status and print
        # the full path to the built docs.
        if hasattr(sphinx, 'build_main'):
            status = sphinx.build_main(sphinx_args)
        else:
            status = sphinx.main(sphinx_args)

        if status:
            raise RuntimeError("documentation step '%s' failed" % (mode,))

        sys.stdout.write("\nDocumentation step '%s' performed, results here:\n"
                         "   %s/\n" % (mode, path))


def setup_package():
    with open('README.rst') as f:
        readme_content = f.read()

    build_requires = ["numpy>=1.17.0"]
    tests_require = build_requires + ["pymongo>=3.9.0,<4"]
    install_requires = build_requires + ["pymongo>=3.6.0,<4"]

    libraries = []
    if sys.platform == "win32":
        libraries.append("ws2_32")
    elif sys.platform != "darwin":
        # librt may be needed for clock_gettime()
        libraries.append("rt")

    setup(
        name='BSON-NumPy',
        version=VERSION,
        description='Module for converting directly from BSON to NumPy '
                    'ndarrays',
        long_description=readme_content,
        author='Anna Herlihy',
        author_email='mongodb-user@googlegroups.com',
        url='https://github.com/mongodb/bson-numpy',
        keywords=["mongo", "mongodb", "pymongo", "numpy", "bson"],
        license="Apache License, Version 2.0",
        python_requires=">=3.5",
        classifiers=[
            "Development Status :: 3 - Alpha",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: Apache Software License",
            "Operating System :: MacOS :: MacOS X",
            "Operating System :: POSIX",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.5",
            "Programming Language :: Python :: 3.6",
            "Programming Language :: Python :: 3.7",
            "Programming Language :: Python :: Implementation :: CPython",
            "Topic :: Database"],
        setup_requires=build_requires,
        ext_modules=[
            Extension(
                'bsonnumpy._cbsonnumpy',
                sources=(glob.glob("bsonnumpy/*.c") +
                         glob.glob("bsonnumpy/*/*.c")),
                include_dirs=["bsonnumpy", "bsonnumpy/bson"],
                define_macros=[("BSON_COMPILATION", 1)],
                libraries=libraries)],
        install_requires=install_requires,
        test_suite="test",
        tests_require=tests_require,
        cmdclass={'build_ext': build_ext,
                  'doc': doc},
        packages=["bsonnumpy"])


if __name__ == '__main__':
    setup_package()
